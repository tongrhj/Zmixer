import React, { PropTypes } from 'react'
import Player from './player'
import Compose from './compose'
import Library from './library'
<<<<<<< HEAD
import Mixing from './mixing'

import './main.styl'

const userID = 'Anon'
=======
import MixingRoom from './mixing'
import update from 'react-addons-update'
import sortBy from 'lodash.sortby'
>>>>>>> yongjun21/master

const collection = [
  {
    trackID: 1,
    title: 'Hello',
    composedBy: 'Anon',
    layers: [
      {sampleID: 1, volume: 3},
      {sampleID: 2, volume: 3},
      {sampleID: 3, volume: 3}
    ],
    tags: ['Nature', 'Sea'],
    timesPlayed: 10
  }, {
    trackID: 2,
    title: 'World',
    composedBy: 'yongjun21',
    layers: [
      {sampleID: 1, volume: 2},
      {sampleID: 3, volume: 3},
      {sampleID: 5, volume: 4}
    ],
    tags: ['New age'],
    timesPlayed: 99
  }, {
    trackID: 3,
    title: 'Happy birthday',
    composedBy: 'Jared Tong',
    layers: [
      {sampleID: 7, volume: 1},
      {sampleID: 8, volume: 1},
      {sampleID: 9, volume: 1}
    ],
    tags: ['Urban', 'White noise'],
    timesPlayed: 99
  }
]

export default class Main extends React.Component {
  constructor (props) {
    super(props)
    this.state = {
<<<<<<< HEAD
      currentTrack: newTrack(),
      library: collection,
      currentView: 'mixing'
=======
      userID: 'Jared Tong',
      currentTrackID: -1,
      layers: [],
      library: collection
>>>>>>> yongjun21/master
    }
    this.volumeUpLayer = this.volumeUpLayer.bind(this)
    this.loadTrack = this.loadTrack.bind(this)
    this.uploadHandler = this.uploadHandler.bind(this)
  }

  volumeUpLayer (event) {
    const selectedSampleID = +event.target.value
    const targetIdx = this.state.layers.findIndex(layer => {
      return layer.sampleID === selectedSampleID
    })
    if (targetIdx > -1) {
      const targetLayer = this.state.layers[targetIdx]
      if (targetLayer.volume === 3) {
        this.state.layers.splice(targetIdx, 1)
      } else {
        targetLayer.volume++
      }
    } else {
      this.state.layers.push({
        sampleID: selectedSampleID,
        volume: 1
      })
    }
    this.forceUpdate()
  }

  loadTrack (event) {
    const selectedTrackID = +event.target.value
    const selectedTrack = this.state.library.find(track => {
      return track.trackID === selectedTrackID
    })
    selectedTrack.timesPlayed++
    this.setState({
      currentTrackID: selectedTrackID,
      layers: update([], {$push: selectedTrack.layers})
    })
    console.log(this.state)
    this.refs.compose.importState(selectedTrack.title, selectedTrack.tags)
    this.refs.player.togglePlay()
  }

  uploadHandler (newData) {
    let maxID = -1
    this.state.library.forEach(track => maxID = Math.max(maxID, track.trackID))
    const newTrack = {
      trackID: maxID + 1,
      composedBy: this.state.userID,
      title: newData.title,
      layers: sortBy(this.state.layers, layer => -layer.volume),
      tags: newData.tags,
      timesPlayed: 0
    }

    this.state.library.push(newTrack)
    this.setState({currentTrackID: newTrack.trackID})
  }

  handleViewChange (newView) {
    this.setState({currentView: newView})
  }

  handleNavClick (newView) {
    this.setState({currentView: newView})
  }

  render () {
    const currentTrack = this.state.library.find(track => {
      return track.trackID === this.state.currentTrackID
    }) || {title: '', tags: []}

    const playerProps = {
      ref: 'player',
      title: currentTrack.title,
      layers: this.state.layers,
      samples: [{}]
    }

    const composeProps = {
<<<<<<< HEAD
      title: this.state.currentTrack.title,
      composedBy: userID,
      layers: this.state.currentTrack.layers,
      tags: this.state.currentTrack.tags,
      uploadHandler: this.uploadHandler,
      checkView: this.handleViewChange.bind(this)
=======
      ref: 'compose',
      title: currentTrack.title,
      composedBy: this.state.userID,
      layers: this.state.layers,
      tags: currentTrack.tags,
      uploadHandler: this.uploadHandler
>>>>>>> yongjun21/master
    }

    const libraryProps = {
      userID: this.state.userID,
      collection: this.state.library,
      loadTrack: this.loadTrack
    }

    const mixingRoomProps = {
      layers: this.state.layers,
      volumeUp: this.volumeUpLayer
    }

    const mixingProps = {
      layers: this.state.currentTrack.layers,
      checkView: this.handleViewChange.bind(this)
    }

    let viewToShow
    if (this.state.currentView === 'mixing') {
      viewToShow = <Mixing {...mixingProps} />
    } else if (this.state.currentView === 'compose') {
      viewToShow = <Compose {...composeProps} />
    } else if (this.state.currentView === 'library') {
      viewToShow = <Library {...libraryProps} />
    }
    return (
      <div className='MobileContainer'>
        <Player {...playerProps} />
<<<<<<< HEAD
        {viewToShow}
=======
        <Compose {...composeProps} />
        <Library {...libraryProps} />
        <MixingRoom {...mixingRoomProps} />
>>>>>>> yongjun21/master
      </div>
    )
  }
}
